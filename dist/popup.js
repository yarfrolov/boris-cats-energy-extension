// popup-v1.2.js - –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
function initializeUpdatedPopup(features) {
    console.log('üÜï –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π popup —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏:', features);
    
    function updateButton(isActive) {
        const btn = document.getElementById('toggle-btn');
        if (!btn) return;
        
        if (isActive) {
            btn.textContent = '‚èπÔ∏è –í—ã–∫–ª—é—á–∏—Ç—å';
            btn.style.background = '#FF3B30';
        } else {
            btn.textContent = 'üîó –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å';  
            btn.style.background = '#007AFF';
        }
    }

    function toggleInspector() {
        chrome.tabs.query({active: true, currentWindow: true}, tabs => {
            if (!tabs[0]) return;
            
            chrome.tabs.sendMessage(tabs[0].id, {action: 'toggle_inspector'}, response => {
                if (chrome.runtime.lastError) {
                    console.log('–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π content script...');
                    chrome.scripting.executeScript({
                        target: {tabId: tabs[0].id},
                        func: injectDynamicContentScript
                    });
                    updateButton(true);
                } else if (response) {
                    updateButton(response.active);
                }
            });
        });
    }

    function openGlossary() {
        chrome.tabs.create({ 
            url: 'https://developer.mozilla.org/ru/docs/Web/CSS',
            active: true
        });
    }
    
    function forceUpdate() {
        console.log('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ...');
        const btn = document.getElementById('update-btn');
        if (btn) {
            btn.textContent = '‚è≥ –û–±–Ω–æ–≤–ª—è–µ–º...';
            btn.disabled = true;
        }
        
        chrome.runtime.sendMessage({ action: 'forceUpdate' }, (response) => {
            if (btn) {
                btn.disabled = false;
                if (response && response.success) {
                    btn.textContent = '‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ!';
                    setTimeout(() => btn.textContent = 'üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è', 2000);
                } else {
                    btn.textContent = '‚ùå –û—à–∏–±–∫–∞';
                    setTimeout(() => btn.textContent = 'üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è', 2000);
                }
            }
        });
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏–π
    const toggleBtn = document.getElementById('toggle-btn');
    const glossaryLink = document.getElementById('glossary-link');
    const updateBtn = document.getElementById('update-btn');
    
    if (toggleBtn) {
        toggleBtn.replaceWith(toggleBtn.cloneNode(true));
        document.getElementById('toggle-btn').addEventListener('click', toggleInspector);
    }
    
    if (glossaryLink) {
        glossaryLink.replaceWith(glossaryLink.cloneNode(true));
        document.getElementById('glossary-link').addEventListener('click', (e) => {
            e.preventDefault();
            openGlossary();
        });
    }
    
    if (updateBtn) {
        updateBtn.replaceWith(updateBtn.cloneNode(true));
        document.getElementById('update-btn').addEventListener('click', forceUpdate);
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–Ω—Å–ø–µ–∫—Ç–æ—Ä–∞
    chrome.tabs.query({active: true, currentWindow: true}, tabs => {
        if (!tabs[0]) return;
        chrome.tabs.sendMessage(tabs[0].id, {action: 'get_status'}, response => {
            if (!chrome.runtime.lastError && response) {
                updateButton(response.active);
            }
        });
    });
    
    console.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π popup –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
}

async function injectDynamicContentScript() {
    try {
        const response = await chrome.runtime.sendMessage({ action: 'getLatestCode' });
        if (response && response.content) {
            eval(response.content);
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', error);
    }
}
