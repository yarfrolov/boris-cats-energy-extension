// background.js - —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –æ—Ç–ª–∞–¥–∫–æ–π
let cachedCode = {
    content: null,
    popup: null,
    styles: null,
    lastUpdated: null,
    version: null
};

const CONFIG_URL = 'https://yarfrolov.github.io/boris-cats-energy-extension/extension/config.json';
const CODE_BASE_URL = 'https://yarfrolov.github.io/boris-cats-energy-extension/extension/';

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
setInterval(checkForUpdates, 30 * 60 * 1000);

async function checkForUpdates() {
    try {
        console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å GitHub Pages...');
        const response = await fetch(CONFIG_URL + '?t=' + Date.now());
        
        if (!response.ok) {
            throw new Error(`HTTP ${response.status}`);
        }
        
        const config = await response.json();
        console.log('üìã –ö–æ–Ω—Ñ–∏–≥ —Å GitHub:', config);
        
        if (!cachedCode.lastUpdated || 
            new Date(config.lastUpdated) > new Date(cachedCode.lastUpdated)) {
            
            console.log('üÜï –ù–∞–π–¥–µ–Ω—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è! –í–µ—Ä—Å–∏—è:', config.version);
            await loadLatestCode(config);
            
            chrome.action.setBadgeText({text: 'NEW'});
            chrome.action.setBadgeBackgroundColor({color: '#FF3B30'});
            
            setTimeout(() => {
                chrome.action.setBadgeText({text: ''});
            }, 10000);
        } else {
            console.log('‚úÖ –ö–æ–¥ –∞–∫—Ç—É–∞–ª–µ–Ω. –í–µ—Ä—Å–∏—è:', cachedCode.version);
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π:', error);
    }
}

async function loadLatestCode(config) {
    try {
        console.log('‚¨áÔ∏è –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–¥ —Å GitHub Pages...');
        
        const contentResponse = await fetch(CODE_BASE_URL + config.files.content);
        const contentCode = await contentResponse.text();
        
        console.log('üì• –ó–∞–≥—Ä—É–∂–µ–Ω content script, —Ä–∞–∑–º–µ—Ä:', contentCode.length, '—Å–∏–º–≤–æ–ª–æ–≤');
        
        // –û–¢–õ–ê–î–ö–ê: –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–∏–º–≤–æ–ª –≤ –∫–æ–¥–µ
        if (contentCode.includes('–ü—É–Ω–∫—Ç')) {
            console.log('‚úÖ –°–∏–º–≤–æ–ª "–ü—É–Ω–∫—Ç" –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–¥–µ!');
        } else {
            console.log('‚ùå –°–∏–º–≤–æ–ª "–ü—É–Ω–∫—Ç" –ù–ï –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–¥–µ!');
        }

        cachedCode = {
            content: contentCode,
            popup: null,
            styles: null,
            lastUpdated: config.lastUpdated,
            version: config.version,
            features: config.features || {}
        };

        await chrome.storage.local.set({ cachedCode });
        console.log('‚úÖ –ö–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω –¥–æ –≤–µ—Ä—Å–∏–∏:', config.version);
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–¥–∞:', error);
    }
}

async function loadFallbackCode() {
    try {
        const result = await chrome.storage.local.get(['cachedCode']);
        if (result.cachedCode) {
            cachedCode = result.cachedCode;
            console.log('üì± –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥ –≤–µ—Ä—Å–∏–∏:', cachedCode.version);
            
            // –û–¢–õ–ê–î–ö–ê: –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥
            if (cachedCode.content && cachedCode.content.includes('–ü—É–Ω–∫—Ç')) {
                console.log('‚úÖ –°–∏–º–≤–æ–ª "–ü—É–Ω–∫—Ç" –Ω–∞–π–¥–µ–Ω –≤ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –∫–æ–¥–µ!');
            } else {
                console.log('‚ùå –°–∏–º–≤–æ–ª "–ü—É–Ω–∫—Ç" –ù–ï –Ω–∞–π–¥–µ–Ω –≤ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –∫–æ–¥–µ!');
            }
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–¥–∞:', error);
    }
}

// –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∏–Ω—ä–µ–∫—Ü–∏—è content script
async function injectContentScript(tabId) {
    try {
        if (cachedCode.content) {
            console.log('üíâ –ò–Ω–∂–µ–∫—Ç–∏—Ä—É–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π content script –≤ —Ç–∞–±:', tabId);
            console.log('üì¶ –†–∞–∑–º–µ—Ä –∫–æ–¥–∞:', cachedCode.content.length, '—Å–∏–º–≤–æ–ª–æ–≤');
            
            await chrome.scripting.executeScript({
                target: { tabId: tabId },
                func: (contentCode, version) => {
                    console.log('üîß –í—ã–ø–æ–ª–Ω—è–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∫–æ–¥ –≤–µ—Ä—Å–∏–∏:', version);
                    
                    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ—Ä—Å–∏—é –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                    window.__inspectorVersion = version;
                    
                    // –û–¢–õ–ê–î–ö–ê: –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥ –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º
                    if (contentCode.includes('–ü—É–Ω–∫—Ç')) {
                        console.log('‚úÖ –°–∏–º–≤–æ–ª "–ü—É–Ω–∫—Ç" –µ—Å—Ç—å –≤ –∫–æ–¥–µ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è!');
                    } else {
                        console.log('‚ùå –°–∏–º–≤–æ–ª "–ü—É–Ω–∫—Ç" –ù–ï–¢ –≤ –∫–æ–¥–µ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è!');
                    }
                    
                    // –°–æ–∑–¥–∞–µ–º script —ç–ª–µ–º–µ–Ω—Ç
                    const script = document.createElement('script');
                    script.textContent = contentCode;
                    (document.head || document.documentElement).appendChild(script);
                    
                    setTimeout(() => {
                        if (script.parentNode) {
                            script.parentNode.removeChild(script);
                        }
                    }, 100);
                },
                args: [cachedCode.content, cachedCode.version]
            });
            
            console.log('‚úÖ –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π content script –∏–Ω–∂–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω');
        } else {
            console.log('‚ö†Ô∏è –ù–µ—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–¥–∞ –¥–ª—è –∏–Ω—ä–µ–∫—Ü–∏–∏');
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω—ä–µ–∫—Ü–∏–∏ content script:', error);
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
chrome.runtime.onStartup.addListener(async () => {
    console.log('üöÄ Background script –∑–∞–ø—É—â–µ–Ω (onStartup)');
    await loadFallbackCode();
    checkForUpdates();
});

chrome.runtime.onInstalled.addListener(async (details) => {
    console.log('üöÄ Background script –∑–∞–ø—É—â–µ–Ω (onInstalled)');
    await loadFallbackCode();
    checkForUpdates();
    
    if (details.reason === 'install') {
        console.log('üéâ –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!');
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {
    console.log('üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:', message);
    
    if (message.action === 'getLatestCode') {
        console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ –≤–µ—Ä—Å–∏–∏:', cachedCode.version || 'local');
        sendResponse(cachedCode);
    } else if (message.action === 'forceUpdate') {
        console.log('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ...');
        checkForUpdates().then(() => {
            sendResponse({success: true, version: cachedCode.version});
        }).catch((error) => {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', error);
            sendResponse({success: false});
        });
        return true;
    } else if (message.action === 'getVersion') {
        sendResponse({version: cachedCode.version || '1.0.0'});
    } else if (message.action === 'injectContentScript') {
        if (message.tabId) {
            injectContentScript(message.tabId);
        }
        sendResponse({success: true});
    }
    return true;
});

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞
setTimeout(() => {
    console.log('üîÑ –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...');
    checkForUpdates();
}, 3000);
